generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String    @unique
  password          String
  profilePic        String?
  passwordChangedAt DateTime?
  role              Role      @default(admin)
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Google Calendar tokens
  googleAccessToken  String?
  googleRefreshToken String?
  googleExpiryDate   BigInt? // store expiry in ms
  googleScope        String?

  @@map("users")
}

enum Role {
  super_admin
  admin
}

model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  callLogId String?  @unique @db.ObjectId
  callLog   CallLog? @relation(fields: [callLogId], references: [id])

  // Appointment details
  title       String
  description String?
  startTime   DateTime?
  endTime     DateTime?
  timeZone    String?   @default("UTC")

  // Google Calendar integration
  googleEventId String? // store the event id (from Google Calendar API)
  meetLink      String? // Google Meet link if created
  calendarLink  String? // htmlLink from calendar

  status String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Service {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceName           String
  voiceId               String
  voiceName             String
  phoneNumber           String
  requires_verification Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  phone_number_id       String

  callLogs CallLog[]
  agents   AIAgent[]

  @@map("services")
}

model CallLog {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  call_sid String?
  agent_id String

  serviceId String  @db.ObjectId
  service   Service @relation(fields: [serviceId], references: [id])

  conversation_id    String?
  from_number        String
  to_number          String
  callType           String
  call_status        String
  call_time          DateTime?
  call_started_at    DateTime?
  call_completed_at  DateTime?
  call_duration      Int?
  recording_duration Int?
  call_transcript    String?
  call_recording     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Additional fields
  name           String?
  contact_number String?
  company        String?
  meeting_time   String?
  area           String?
  description    String?

  bookings Booking?

  @@map("AICallLog")
}


model AIAgent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  agentId   String   // agent_8201k6bcnea2eacacnja5mtq6pde
  callType  String?  // outbound, inbound, etc.
  
  serviceId String   @db.ObjectId
  service   Service  @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("aiagents")
}